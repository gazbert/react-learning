{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","strategyList","map","row","index","key","name","className","onClick","removeStrategy","Table","this","strategies","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","type","onChange","App","filter","strategy","i","ReactDOM","render","document","getElementById"],"mappings":"yQAGMA,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,wCAQFC,EAAY,SAAAC,GAEhB,IAAMC,EAAOD,EAAME,aAAaC,IAAI,SAACC,EAAKC,GAExC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,WACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,eAAeL,KAA5C,cAKR,OAAO,+BAAQJ,IAmBFU,E,iLAbJ,MAGgCC,KAAKZ,MAApCa,EAHD,EAGCA,WAAYH,EAHb,EAGaA,eACpB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,aAAcW,EAAYH,eAAgBA,S,GARzCI,a,OCULC,E,YA1Cb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAWRgB,aAAe,SAAAC,GAAS,MAEEA,EAAMC,OAAtBX,EAFc,EAEdA,KAAMY,EAFQ,EAERA,MACd,EAAKC,SAAL,eACGb,EAAOY,KAhBO,EAoBnBE,WAAa,WACX,EAAKrB,MAAMsB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAnBnB,EAAKA,aAAe,CAClBjB,KAAM,GACNC,UAAW,IAGb,EAAKe,MAAQ,EAAKC,aARD,E,sEAyBT,IAAD,EACqBZ,KAAKW,MAAzBhB,EADD,EACCA,KAAMC,EADP,EACOA,UAEd,OACE,8BACE,6BACA,gDACA,uCACA,2BAAOiB,KAAK,OAAOlB,KAAK,OAAOY,MAAOZ,EAAMmB,SAAUd,KAAKI,eAC3D,wCACA,2BAAOS,KAAK,OAAOlB,KAAK,YAAYY,MAAOX,EAAWkB,SAAUd,KAAKI,eACrE,2BAAOS,KAAK,SAASN,MAAM,MAAMV,QAASG,KAAKS,kB,GArCpCP,aCqDJa,E,2MAlDbJ,MAAQ,CACNV,WAAY,CACV,CACEN,KAAM,MACNC,UAAW,2BAEb,CACED,KAAM,UACNC,UAAW,+BAEb,CACED,KAAM,OACNC,UAAW,8B,EAKjBE,eAAiB,SAAAL,GAAS,IAEhBQ,EAAe,EAAKU,MAApBV,WAIR,EAAKO,SAAS,CAEZP,WAAYA,EAAWe,OAAO,SAACC,EAAUC,GACvC,OAAOA,IAAMzB,O,EAQnBiB,aAAe,SAAAO,GACb,EAAKT,SAAS,CAAEP,WAAW,GAAD,mBAAM,EAAKU,MAAMV,YAAjB,CAA6BgB,O,wEAG/C,IACAhB,EAAeD,KAAKW,MAApBV,WACR,OACE,yBAAKL,UAAU,aACb,kDACA,kBAAC,EAAD,CAAOK,WAAYA,EAAYH,eAAgBE,KAAKF,iBACpD,kBAAC,EAAD,CAAMY,aAAcV,KAAKU,oB,GA7CfR,a,MCIlBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.731d3e31.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Simple Component example.\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Class</th>\n      </tr>\n    </thead>\n  );\n};\n\n// Another Simple Component - arrow function that takes props as arg\n// Cannot change props - they're read-only. Using state allows us to modify stuff...\nconst TableBody = props => {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n  const rows = props.strategyList.map((row, index) => {\n    // (current value, current index)\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.className}</td>\n        <td>\n          <button onClick={() => props.removeStrategy(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n  return <tbody>{rows}</tbody>;\n};\n\n// Capitalized to differentiate from HTML table element\n// This is a Class Component.\nclass Table extends Component {\n  render() {\n    // ES6 property shorthand to create variables that contains this.props.strategies\n    // and this.props.removeStrategy\n    const { strategies, removeStrategy } = this.props;\n    return (\n      <table>\n        <TableHeader />\n        <TableBody strategyList={strategies} removeStrategy={removeStrategy} />\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: '',\n      className: ''\n    };\n\n    this.state = this.initialState;\n  }\n\n  // fired whenever use makes change to input in form\n  handleChange = event => {\n    // ES6 property shorthand to create a variables that contain event.target.name and event.target.value\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { name, className } = this.state;\n\n    return (\n      <form>\n        <br></br>\n        <h4>Add new Strategy</h4>  \n        <label>Name</label>\n        <input type=\"text\" name=\"name\" value={name} onChange={this.handleChange} />\n        <label>Class</label>\n        <input type=\"text\" name=\"className\" value={className} onChange={this.handleChange} />\n        <input type=\"button\" value=\"Add\" onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    strategies: [\n      {\n        name: 'EMA',\n        className: 'com.strategies.Ema.java'\n      },\n      {\n        name: 'Scalper',\n        className: 'com.strategies.Scalper.java'\n      },\n      {\n        name: 'MACD',\n        className: 'com.strategies.Macd.java'\n      }\n    ]\n  };\n\n  removeStrategy = index => {\n    // ES6 property shorthand to create a variable that contains this.state.strategies\n    const { strategies } = this.state;\n\n    // You must use this.setState() to modify an array - inbuilt react function.\n    // Simply applying a new value to this.state.strategies will not work.\n    this.setState({\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n      strategies: strategies.filter((strategy, i) => {\n        return i !== index; // return non matching indexes, does not mutate, returns new array/copy\n      })\n    });\n  };\n\n  // Will update the state by taking the existing this.state.strategies and\n  // adding the new strategy parameter, using the ES6 spread operator.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n  handleSubmit = strategy => {\n    this.setState({ strategies: [...this.state.strategies, strategy] });\n  };\n\n  render() {\n    const { strategies } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>Trading Strategies</h1>\n        <Table strategies={strategies} removeStrategy={this.removeStrategy} />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n//import App from './ApiClient'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}